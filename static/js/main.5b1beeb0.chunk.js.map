{"version":3,"sources":["components/CurrencyDropdown.js","components/SourceInput.js","App.js","index.js"],"names":["CurrencyDropdown","data","onChange","onSelectChange","currency","rate","pairs","useMemo","tempPairs","exchangeRates","forEach","code","console","log","sortedCurrencies","map","sort","value","className","target","SourceInput","inputValue","useState","errorText","setErrorText","onInputChange","input","isNaN","Number","slice","type","App","sourceInput","setSourceInput","rateFrom","setRateFrom","rateTo","setRateTo","exchangeData","result","Infinity","Math","abs","toFixed","calcResult","disabled","ReactDom","render","document","getElementById"],"mappings":"oLAEe,SAASA,EAAT,GAA+C,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACvCC,EAAiB,SAACC,GACpB,IAAMC,EAAOC,EAAMF,GACnBF,EAASG,IAGPC,EAAQC,mBAAQ,WAClB,IAAMC,EAAY,GAKlB,OAJAP,EAAKQ,cAAcC,SACf,gBAAGC,EAAH,EAAGA,KAAMN,EAAT,EAASA,KAAT,OAAqBG,EAAUG,GAAQN,KAE3CO,QAAQC,IAAIL,GACLA,IACR,CAACP,IAEEa,EAAmBP,mBACrB,kBACIN,EAAKQ,cACAM,KAAI,qBAAGJ,QACPK,OACAD,KAAI,SAACJ,GACF,OACI,wBAAmBM,MAAON,EAA1B,SACKA,GADQA,QAK7B,CAACV,IAGL,OACI,yBACIiB,UAAU,WACVhB,SAAU,gBAAGiB,EAAH,EAAGA,OAAH,OAAgBhB,EAAegB,EAAOF,QAFpD,UAII,yCACCH,KCpCE,SAASM,EAAT,GAAgD,IAAzBlB,EAAwB,EAAxBA,SAAUmB,EAAc,EAAdA,WAC5C,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAgB,SAACC,GACfC,MAAMC,OAAOF,IAASF,EAAa,yBACnBA,EAAXE,EAAQ,EAAgB,wBACf,IAElBxB,EAASwB,EAAMG,MAAM,EAAG,KAG5B,OACI,qCACI,uBACI3B,SAAU,gBAAGiB,EAAH,EAAGA,OAAH,OAAgBM,EAAcN,EAAOF,QAC/CA,MAAOI,EACPS,KAAK,SAET,mBAAGZ,UAAU,QAAb,SAAsBK,O,WCdnB,SAASQ,IACpB,MAAsCT,mBAAS,IAA/C,mBAAOU,EAAP,KAAoBC,EAApB,KACA,EAAgCX,mBAAS,MAAzC,mBAAOY,EAAP,KAAiBC,EAAjB,KACA,EAA4Bb,mBAAS,MAArC,mBAAOc,EAAP,KAAeC,EAAf,KAcA,OACI,sBAAKnB,UAAU,MAAf,UACI,oDACA,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,kBACA,cAAClB,EAAD,CACIC,KAAMqC,EACNpC,SAAUiC,IAEd,cAACf,EAAD,CACIlB,SAAU+B,EACVZ,WAAYW,OAGpB,sBAAKd,UAAU,YAAf,UACI,qBAAKA,UAAU,OAAf,gBACA,cAAClB,EAAD,CACIC,KAAMqC,EACNpC,SAAUmC,IAEd,uBAAOpB,MAjCJ,WACf,IAAMsB,EAAUP,EAAcE,EAAYE,EAC1C,OACIT,MAAMY,IACNA,KAAYC,KACZD,IAAWC,KACXD,IAAWE,KAAKC,IAAIH,GAEb,GACJA,EAAOI,QAAQ,GAwBIC,GAAcd,KAAK,OAAOe,UAAQ,aCzCpEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.5b1beeb0.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\r\n\r\nexport default function CurrencyDropdown({ data, onChange }) {\r\n    const onSelectChange = (currency) => {\r\n        const rate = pairs[currency];\r\n        onChange(rate);\r\n    };\r\n\r\n    const pairs = useMemo(() => {\r\n        const tempPairs = {};\r\n        data.exchangeRates.forEach(\r\n            ({ code, rate }) => (tempPairs[code] = rate)\r\n        );\r\n        console.log(tempPairs);\r\n        return tempPairs;\r\n    }, [data]);\r\n\r\n    const sortedCurrencies = useMemo(\r\n        () =>\r\n            data.exchangeRates\r\n                .map(({ code }) => code)\r\n                .sort()\r\n                .map((code) => {\r\n                    return (\r\n                        <option key={code} value={code}>\r\n                            {code}\r\n                        </option>\r\n                    );\r\n                }),\r\n        [data]\r\n    );\r\n\r\n    return (\r\n        <select\r\n            className=\"currency\"\r\n            onChange={({ target }) => onSelectChange(target.value)}\r\n        >\r\n            <option>---</option>\r\n            {sortedCurrencies}\r\n        </select>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function SourceInput({ onChange, inputValue }) {\r\n    const [errorText, setErrorText] = useState('');\r\n\r\n    const onInputChange = (input) => {\r\n        if (isNaN(Number(input))) setErrorText('â›” enter a number');\r\n        else if (input < 0) setErrorText('only positive numbers');\r\n        else setErrorText('');\r\n\r\n        onChange(input.slice(0, 6));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                onChange={({ target }) => onInputChange(target.value)}\r\n                value={inputValue}\r\n                type=\"text\"\r\n            />\r\n            <p className=\"error\">{errorText}</p>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport CurrencyDropdown from './components/CurrencyDropdown';\r\nimport SourceInput from './components/SourceInput';\r\nimport exchangeData from './data/exchangeData.json';\r\n\r\nexport default function App() {\r\n    const [sourceInput, setSourceInput] = useState('');\r\n    const [rateFrom, setRateFrom] = useState(null);\r\n    const [rateTo, setRateTo] = useState(null);\r\n\r\n    const calcResult = () => {\r\n        const result = (sourceInput * rateFrom) / rateTo;\r\n        if (\r\n            isNaN(result) ||\r\n            result === -Infinity ||\r\n            result === Infinity ||\r\n            result !== Math.abs(result)\r\n        )\r\n            return '';\r\n        return result.toFixed(2);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <h1>Currency Converter</h1>\r\n            <div className=\"input-box\">\r\n                <div className=\"box-left\">\r\n                    <div className=\"text\">from</div>\r\n                    <CurrencyDropdown\r\n                        data={exchangeData}\r\n                        onChange={setRateFrom}\r\n                    />\r\n                    <SourceInput\r\n                        onChange={setSourceInput}\r\n                        inputValue={sourceInput}\r\n                    />\r\n                </div>\r\n                <div className=\"box-right\">\r\n                    <div className=\"text\">to</div>\r\n                    <CurrencyDropdown\r\n                        data={exchangeData}\r\n                        onChange={setRateTo}\r\n                    />\r\n                    <input value={calcResult()} type=\"text\" disabled />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import ReactDom from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}